{"version":3,"sources":["../lib/pti/index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["// puppeteer-to-istanbul 1.2.2\nimport clone from 'clone';\nimport fs from 'fs';\nimport jsonfile from 'jsonfile';\nimport mkdirp from 'mkdirp';\nimport pathLib from 'path';\nimport v8toIstanbul from 'v8-to-istanbul';\nimport { CoverageEntryRange, Coverages } from '../types';\nimport { shorternUrl } from '../utils';\n\ntype V8CoverageEntryRange = { startOffset: number; endOffset: number; count: number };\ntype V8CoverageEntry = {\n\tscriptId: number;\n\turl: string;\n\tfunctions: Array<{ ranges: Array<V8CoverageEntryRange>; isBlockCoverage: boolean }>;\n};\n\nconst nycFolder = pathLib.join(process.cwd(), '.nyc_output');\nconst storageFolder = pathLib.join(nycFolder, 'js');\nconst nycOutFilename = pathLib.join(nycFolder, 'out.json');\n\nclass OutputFiles {\n\tprivate iterator: number = 0;\n\tprivate coverages: Coverages;\n\tconstructor(coverages: Coverages) {\n\t\t// Clone coverageInfo to prevent mutating the passed in data\n\t\tthis.coverages = clone(coverages);\n\t\tthis.parseAndIsolate();\n\t}\n\tprivate rewritePath(path: string): string {\n\t\t// generate a new path relative to ./coverage/js.\n\t\t// this would be around where you'd use mkdirp.\n\t\tpath = shorternUrl(path);\n\t\t// Get the last element in the path name\n\t\tvar truncatedPath = pathLib.basename(path);\n\n\t\t// Special case: when html present, strip and return specialized string\n\t\tif (truncatedPath.includes('.html')) {\n\t\t\ttruncatedPath = pathLib.resolve(storageFolder, truncatedPath) + '.puppeteerTemp-inline';\n\t\t} else {\n\t\t\ttruncatedPath = truncatedPath.split('.js')[0];\n\t\t\ttruncatedPath = pathLib.resolve(storageFolder, truncatedPath);\n\t\t}\n\t\tmkdirp.sync(storageFolder);\n\t\tif (fs.existsSync(truncatedPath + '.js')) {\n\t\t\tthis.iterator++;\n\t\t\treturn `${truncatedPath}-${this.iterator}.js`;\n\t\t} else {\n\t\t\treturn `${truncatedPath}.js`;\n\t\t}\n\t}\n\tprivate parseAndIsolate() {\n\t\t(this.coverages || []).forEach(coverage => {\n\t\t\tconst path = this.rewritePath(coverage.url);\n\t\t\tcoverage.url = path;\n\t\t\tfs.writeFileSync(path, coverage.text);\n\t\t});\n\t}\n\tgetTransformedCoverage(): Coverages {\n\t\treturn this.coverages;\n\t}\n}\n\nclass PuppeteerToV8 {\n\tprivate coverages: Coverages;\n\tconstructor(coverages: Coverages) {\n\t\tthis.coverages = coverages;\n\t}\n\tconvertCoverage(): Array<V8CoverageEntry> {\n\t\t// Iterate through coverage info and create IDs\n\t\treturn this.coverages.map((coverage, index) => {\n\t\t\treturn {\n\t\t\t\tscriptId: index,\n\t\t\t\turl: `file://${coverage.url}`,\n\t\t\t\tfunctions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tranges: coverage.ranges.map(this.convertRange),\n\t\t\t\t\t\tisBlockCoverage: true\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t} as V8CoverageEntry;\n\t\t});\n\t}\n\t// Takes in a Puppeteer range object with start and end properties and\n\t// converts it to a V8 range with startOffset, endOffset, and count properties\n\tconvertRange(range: CoverageEntryRange): V8CoverageEntryRange {\n\t\treturn {\n\t\t\tstartOffset: range.start,\n\t\t\tendOffset: range.end,\n\t\t\tcount: 1\n\t\t};\n\t}\n}\n\nclass PuppeteerToIstanbul {\n\tprivate puppeteerToV8Info: Array<V8CoverageEntry>;\n\tconstructor(coverages: Coverages) {\n\t\tthis.puppeteerToV8Info = new PuppeteerToV8(\n\t\t\tnew OutputFiles(coverages).getTransformedCoverage()\n\t\t).convertCoverage();\n\t}\n\twriteIstanbulFormat() {\n\t\tconst fullJson = {};\n\n\t\tthis.puppeteerToV8Info.forEach(jsFile => {\n\t\t\tconst script = v8toIstanbul(jsFile.url);\n\t\t\tscript.applyCoverage(jsFile.functions);\n\n\t\t\tconst istanbulCoverage = script.toIstanbul();\n\t\t\tconst keys = Object.keys(istanbulCoverage);\n\n\t\t\tfullJson[keys[0]] = istanbulCoverage[keys[0]];\n\t\t});\n\n\t\tmkdirp.sync(nycFolder);\n\t\tjsonfile.writeFileSync(nycOutFilename, fullJson);\n\t}\n}\n\nexport const write = (puppeteerFormat: Coverages): void => {\n\tconst pti = new PuppeteerToIstanbul(puppeteerFormat);\n\tpti.writeIstanbulFormat();\n};\n"]}