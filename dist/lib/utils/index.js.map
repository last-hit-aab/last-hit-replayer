{"version":3,"sources":["../lib/utils/index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import fs from 'fs';\nimport { Flow, Story } from 'last-hit-types';\nimport path from 'path';\nimport Environment from '../config/env';\nimport { FlowFile } from '../types';\n\nexport const inElectron = !!process.versions.electron;\n\nexport const getTempFolder = (fallbackFolder?: string): string | undefined => {\n\tif (inElectron) {\n\t\t// IMPORTANT donot move to import block, electron might not exists\n\t\tconst { app } = require('electron');\n\t\treturn app.getPath('logs');\n\t} else {\n\t\treturn fallbackFolder;\n\t}\n};\n\n/**\n * get process id\n */\nexport const getProcessId = (): string => `${process.pid}`;\n\n/**\n * rewrite log files, note only be called in CI\n */\nlet logger: Console;\nexport const getLogger = (): Console => {\n\tif (!logger) {\n\t\tconst output = fs.createWriteStream(path.join(process.cwd(), 'stdout.log'));\n\t\tconst errorOutput = fs.createWriteStream(path.join(process.cwd(), 'stderr.log'));\n\t\tlogger = new console.Console({ stdout: output, stderr: errorOutput });\n\t}\n\treturn logger;\n};\n\nexport const shorternUrl = (url: string): string => {\n\ttry {\n\t\tconst parsed = new URL(url);\n\t\tparsed.search = '';\n\t\tparsed.hash = '';\n\t\treturn parsed.href;\n\t} catch {\n\t\t// parse fail, not a valid url, return directly\n\t\treturn url;\n\t}\n};\n\n/**\n * generate flow key\n */\nexport const generateKeyByObject = (story: Story, flow: Flow): string =>\n\t`[${flow.name}@${story.name}]`;\nexport const generateKeyByString = (storyName: string, flowName: string): string =>\n\t`[${flowName}@${storyName}]`;\n\n/**\n * build flows array of given workspace\n */\nexport const findFlows = (env: Environment): FlowFile[] => {\n\tconst workspace = env.getWorkspace();\n\treturn fs\n\t\t.readdirSync(workspace)\n\t\t.filter(dir => fs.statSync(path.join(workspace, dir)).isDirectory())\n\t\t.filter(dir => !['.scripts'].includes(dir))\n\t\t.map(storyName => {\n\t\t\treturn fs\n\t\t\t\t.readdirSync(path.join(workspace, storyName))\n\t\t\t\t.filter(flowFilename =>\n\t\t\t\t\tfs.statSync(path.join(workspace, storyName, flowFilename)).isFile()\n\t\t\t\t)\n\t\t\t\t.filter(flowFilename => flowFilename.endsWith('.flow.json'))\n\t\t\t\t.map(flowFilename => flowFilename.replace(/^(.*)\\.flow\\.json$/, '$1'))\n\t\t\t\t.filter(\n\t\t\t\t\tflowName =>\n\t\t\t\t\t\tenv.isIncluded(storyName, flowName) && !env.isExcluded(storyName, flowName)\n\t\t\t\t)\n\t\t\t\t.map(flowName => ({ story: storyName, flow: flowName }));\n\t\t})\n\t\t.reduce((flows, array) => {\n\t\t\tflows.push(...array);\n\t\t\treturn flows;\n\t\t}, [] as FlowFile[]);\n};\n"]}