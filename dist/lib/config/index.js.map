{"version":3,"sources":["../lib/config/index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import fs from 'fs';\nimport jsonfile from 'jsonfile';\nimport path from 'path';\nimport { argv as args } from 'yargs';\nimport { Config, EnvironmentOptions, WorkspaceConfig } from '../types';\nimport { getProcessId } from '../utils';\nimport Environment from './env';\n\nconst processId = getProcessId();\n\nconst assertWorkspace = async (): Promise<string> => {\n\tconst workspace = args.workspace as string | null;\n\tif (!workspace) {\n\t\t// workspace must be appointed\n\t\tconsole.error(\n\t\t\t(`Process[${processId}] Please specify workspace folder via [--workspace=folder].`\n\t\t\t\t.bold as any).red\n\t\t);\n\t\treturn Promise.reject();\n\t}\n\treturn workspace;\n};\n\nconst readConfigFile = (workspace: string): Config => {\n\tlet config: Config;\n\n\tconst configFile = args['config-file'] as string | null;\n\tdelete args['config-file'];\n\tif (configFile) {\n\t\tconfig = jsonfile.readFileSync(\n\t\t\tpath.isAbsolute(configFile) ? configFile : path.join(workspace, configFile)\n\t\t);\n\t} else {\n\t\tconfig = {} as Config;\n\t}\n\tconfig.workspace = workspace;\n\n\t// story or flow is appointed via cli, has highest priority\n\tconst storyName = args.story as string | undefined;\n\tconst flowName = args.flow as string | undefined;\n\tif (storyName) {\n\t\tconfig.includes = [{ story: storyName, flow: flowName }];\n\t}\n\n\t// env name are appointed via cli, has highest priority\n\tconst envName = args.env as string | null;\n\tif (envName) {\n\t\tconfig.env = envName;\n\t}\n\treturn config;\n};\n\nconst readWorkspaceFile = async (workspace: string): Promise<WorkspaceConfig> => {\n\tconst workspaceSettingsFile = fs.readdirSync(workspace).find(name => name.endsWith('.lhw'));\n\tif (workspaceSettingsFile) {\n\t\treturn jsonfile.readFileSync(\n\t\t\tpath.join(workspace, workspaceSettingsFile)\n\t\t) as WorkspaceConfig;\n\t} else {\n\t\t// workspace file not found\n\t\treturn { envs: [] } as WorkspaceConfig;\n\t}\n};\n\nconst buildEnvironment = async (\n\tconfig: Config,\n\tworkspaceConfig: WorkspaceConfig\n): Promise<Environment> => {\n\tlet env: EnvironmentOptions;\n\n\t// find appointed environment\n\tconst envName = config.env;\n\tif (envName) {\n\t\tenv = (workspaceConfig.envs || []).find((env: EnvironmentOptions) => env.name === envName);\n\t\tif (env == null) {\n\t\t\tconsole.error(\n\t\t\t\t(`Process[${processId}] Given environment[${envName}] not found.`.bold as any).red\n\t\t\t);\n\t\t\treturn Promise.reject();\n\t\t}\n\t} else {\n\t\tenv = Environment.exposeNoop();\n\t}\n\tenv.workspace = config.workspace;\n\tenv.includes = config.includes;\n\tenv.child = config.child;\n\tenv.parallel = args.parallel as number;\n\n\t// settings are appointed via cli, has highest priority\n\tconst settings = Object.keys(config)\n\t\t.filter(key => key.startsWith('settings-'))\n\t\t.reduce((all, key) => {\n\t\t\tall[key.replace('settings-', '')] = config[key];\n\t\t\treturn all;\n\t\t}, {});\n\t// mix settings to environment\n\tenv = Object.assign(env, settings);\n\treturn new Environment(env);\n};\n\nexport const loadConfig = async (): Promise<Environment> => {\n\ttry {\n\t\tconst workspace = await assertWorkspace();\n\t\tconst config = readConfigFile(workspace);\n\t\tconst workspaceConfig = await readWorkspaceFile(workspace);\n\t\treturn buildEnvironment(config, workspaceConfig);\n\t} catch (e) {\n\t\treturn Promise.reject(e);\n\t}\n};\n"]}