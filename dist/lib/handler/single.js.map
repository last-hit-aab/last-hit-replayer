{"version":3,"sources":["../lib/handler/single.ts"],"names":[],"mappings":"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","file":"single.js","sourcesContent":["import fs from 'fs';\nimport jsonfile from 'jsonfile';\nimport path from 'path';\nimport Environment from '../config/env';\nimport { Coverages, FlowFile, Report, SlowAjax } from '../types';\nimport { getLogger, getProcessId } from '../utils';\nimport { print } from './print';\nimport { handleFlow } from './single-flow';\n\nconst processId = getProcessId();\n\nconst createTemporaryFolders = async (\n\tenv: Environment\n): Promise<{\n\tresultTempFolder: string;\n\tthreadTempFolder: string;\n}> => {\n\tconst workspace = env.getWorkspace();\n\tconst resultTempFolder = path.join(workspace, '.result-temp');\n\tif (!env.isOnChildProcess()) {\n\t\t// not in child process, delete the result temp folder\n\t\tif (fs.existsSync(resultTempFolder)) {\n\t\t\tfs.rmdirSync(resultTempFolder, { recursive: true });\n\t\t}\n\t}\n\tif (!fs.existsSync(resultTempFolder)) {\n\t\tfs.mkdirSync(resultTempFolder);\n\t}\n\tconst threadTempFolder = path.join(resultTempFolder, processId);\n\tif (!fs.existsSync(threadTempFolder)) {\n\t\tfs.mkdirSync(threadTempFolder);\n\t}\n\n\tconst resultParamsTempFolder = path.join(workspace, '.result-params-temp');\n\tif (!env.isOnChildProcess()) {\n\t\t// not in child process, delete the result temp folder\n\t\tif (fs.existsSync(resultParamsTempFolder)) {\n\t\t\tfs.rmdirSync(resultParamsTempFolder, { recursive: true });\n\t\t}\n\t}\n\tif (!fs.existsSync(resultParamsTempFolder)) {\n\t\tfs.mkdirSync(resultParamsTempFolder);\n\t}\n\n\treturn {\n\t\tresultTempFolder,\n\t\tthreadTempFolder\n\t};\n};\n\nexport const doOnSingleProcess = async (flows: FlowFile[], env: Environment): Promise<void> => {\n\tconst { threadTempFolder } = await createTemporaryFolders(env);\n\tlet jammed = false;\n\n\tconst logger = getLogger();\n\tconst reports: Report[] = [];\n\tconst allCoverages: Coverages = [];\n\ttry {\n\t\tconst pendingFlows: Array<FlowFile> = flows;\n\t\tconst run = async (flows: Array<FlowFile>) => {\n\t\t\tawait flows.reduce(async (promise, flow) => {\n\t\t\t\tawait promise;\n\t\t\t\ttry {\n\t\t\t\t\tconst { report, coverages, code } = await handleFlow(flow, env);\n\t\t\t\t\tif (code === 'pending') {\n\t\t\t\t\t\tpendingFlows.push(flow);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treports.push(report);\n\t\t\t\t\t\tif (coverages && Array.isArray(coverages)) {\n\t\t\t\t\t\t\tallCoverages.push(...coverages);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} catch (e) {\n\t\t\t\t\tlogger.error(e);\n\t\t\t\t}\n\t\t\t\treturn Promise.resolve();\n\t\t\t}, Promise.resolve());\n\t\t};\n\t\tlet countLeft = pendingFlows.length;\n\t\twhile (pendingFlows.length !== 0) {\n\t\t\tconst flows = [ ...pendingFlows ];\n\t\t\tpendingFlows.length = 0;\n\t\t\tawait run(flows);\n\t\t\tif (countLeft === pendingFlows.length) {\n\t\t\t\t// nothing can be run\n\t\t\t\tjammed = true;\n\t\t\t\treports.push(...pendingFlows.map(flowFile => {\n\t\t\t\t\tconst flowContent = env.readFlowFile(flowFile.story, flowFile.flow);\n\t\t\t\t\treturn {\n\t\t\t\t\t\tstoryName: flowFile.story,\n\t\t\t\t\t\tflowName: flowFile.flow,\n\t\t\t\t\t\tnumberOfStep: (flowContent.steps || []).length,\n\t\t\t\t\t\tnumberOfUIBehavior: 0,\n\t\t\t\t\t\tnumberOfSuccess: 0,\n\t\t\t\t\t\tnumberOfAjax: 0,\n\t\t\t\t\t\tnumberOfAssert: 0,\n\t\t\t\t\t\tnumberOfFailed: 0,\n\t\t\t\t\t\terrorStack: '',\n\t\t\t\t\t\tflowParams: (flowContent.params || []).filter(param => param.type === 'both' || param.type === 'in'),\n\t\t\t\t\t\tjammed: true,\n\t\t\t\t\t\tspent: `${flowFile.flow}@${flowFile.story}: 0ms\\n`\n\t\t\t\t\t} as Report;\n\t\t\t\t}));\n\t\t\t\tbreak;\n\t\t\t} else {\n\t\t\t\tcountLeft = pendingFlows.length;\n\t\t\t}\n\t\t}\n\t} catch {\n\t\t// ignore\n\t}\n\n\tconst isChildProcess = env.isOnChildProcess();\n\n\tjsonfile.writeFileSync(path.join(threadTempFolder, 'summary.json'), reports);\n\tjsonfile.writeFileSync(path.join(threadTempFolder, 'coverages.json'), allCoverages);\n\n\t// print when not child process\n\t!isChildProcess && await print(env);\n\tconsole.info((`Process[${processId}] finished`.bold as any).green);\n\n\tif (jammed && isChildProcess) {\n\t\treturn Promise.reject('jammed');\n\t}\n};\n"]}