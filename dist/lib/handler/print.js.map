{"version":3,"sources":["../lib/handler/print.ts"],"names":[],"mappings":"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","file":"print.js","sourcesContent":["import { spawnSync } from 'child_process';\nimport fs from 'fs';\nimport jsonfile from 'jsonfile';\nimport path from 'path';\nimport { CoverageEntry } from 'puppeteer';\nimport Environment from '../config/env';\nimport * as pti from '../pti';\nimport { CoverageEntryRange, Coverages, Report } from '../types';\nimport { shorternUrl } from '../utils';\nimport { generateReport } from './report-generator';\n\nconst binarySearch = (target: CoverageEntryRange, array: Array<CoverageEntryRange>): number => {\n\tlet firstIndex = 0;\n\tlet lastIndex = array.length - 1;\n\tlet middleIndex = Math.floor((lastIndex + firstIndex) / 2);\n\twhile (firstIndex <= lastIndex) {\n\t\t// console.log(firstIndex, middleIndex, lastIndex);\n\t\tconst item = array[middleIndex];\n\t\tif (item.start === target.start && item.end === target.end) {\n\t\t\treturn middleIndex;\n\t\t} else if (target.start > item.end) {\n\t\t\tfirstIndex = middleIndex + 1;\n\t\t} else if (target.end < item.start) {\n\t\t\tlastIndex = middleIndex - 1;\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t\tmiddleIndex = Math.floor((lastIndex + firstIndex) / 2);\n\t}\n\treturn 0 - middleIndex;\n};\n\nexport const print = (env: Environment): void => {\n\tconst reports: Array<Report> = [];\n\tconst coverageMap = {};\n\tconst allCoverageData: Coverages = [];\n\tconst workspace = env.getWorkspace();\n\n\tconst resultTempFolder = path.join(workspace, '.result-temp');\n\n\t(fs.readdirSync(resultTempFolder) || []).forEach(threadFolder => {\n\t\tconst summaryFilename = path.join(\n\t\t\tpath.join(resultTempFolder, threadFolder, 'summary.json')\n\t\t);\n\t\tconst report: Report[] = jsonfile.readFileSync(summaryFilename);\n\t\t(report || []).forEach(item => reports.push(item));\n\t\tconst coverageFilename = path.join(\n\t\t\tpath.join(resultTempFolder, threadFolder, 'coverages.json')\n\t\t);\n\t\tif (fs.existsSync(coverageFilename)) {\n\t\t\tconst coverageData: Coverages = jsonfile.readFileSync(coverageFilename);\n\t\t\tcoverageData.reduce((map, item: CoverageEntry) => {\n\t\t\t\tconst { ranges, text } = item;\n\t\t\t\tconst url = shorternUrl(item.url);\n\t\t\t\tlet data = map[url];\n\t\t\t\tif (!data) {\n\t\t\t\t\tdata = { url, ranges, text };\n\t\t\t\t\tallCoverageData.push(data);\n\t\t\t\t\tmap[url] = data;\n\t\t\t\t} else {\n\t\t\t\t\t(ranges || []).forEach(range => {\n\t\t\t\t\t\tconst index = binarySearch(range, data);\n\t\t\t\t\t\tif (index < 0) {\n\t\t\t\t\t\t\tdata.splice(index * -1 + 1, 0, range);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn map;\n\t\t\t}, coverageMap);\n\t\t}\n\t});\n\tgenerateReport({ filename: 'report.html', results: reports });\n\tpti.write(allCoverageData);\n\tspawnSync('nyc', ['report', '--reporter=html'], { stdio: 'inherit' });\n\n\tconsole.table(\n\t\treports.map(item => {\n\t\t\treturn {\n\t\t\t\tStory: item.storyName,\n\t\t\t\tFlow: item.flowName,\n\t\t\t\tSteps: item.numberOfStep,\n\t\t\t\t'UI Behavior': item.numberOfUIBehavior,\n\t\t\t\tPassed: item.numberOfSuccess,\n\t\t\t\tFailed: item.numberOfFailed,\n\t\t\t\t'Ignored Errors': (item.ignoreErrorList || []).length,\n\t\t\t\t'Ajax calls': item.numberOfAjax,\n\t\t\t\t'Slow ajax calls': (item.slowAjaxRequest || []).length,\n\t\t\t\t'Spent (ms)': Math.round(\n\t\t\t\t\t((item.spent || '').split(' ')[1].split('ms')[0] as unknown) as number\n\t\t\t\t),\n\t\t\t\t'Pass Rate(%)': ((item.numberOfSuccess / item.numberOfStep) * 100)\n\t\t\t\t\t.toFixed(2)\n\t\t\t\t\t.toString()\n\t\t\t};\n\t\t}),\n\t\t[\n\t\t\t'Story',\n\t\t\t'Flow',\n\t\t\t'Steps',\n\t\t\t'UI Behavior',\n\t\t\t'Passed',\n\t\t\t'Failed',\n\t\t\t'Ignored Errors',\n\t\t\t'Ajax calls',\n\t\t\t'Slow ajax calls',\n\t\t\t'Spent (ms)',\n\t\t\t'Pass Rate(%)'\n\t\t]\n\t);\n};\n"]}