{"version":3,"sources":["../lib/handler/multiple.ts"],"names":[],"mappings":"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","file":"multiple.js","sourcesContent":["import spawn from 'cross-spawn';\nimport fs from 'fs';\nimport jsonfile from 'jsonfile';\nimport path from 'path';\nimport uuidv4 from 'uuid/v4';\nimport Environment from '../config/env';\nimport { FlowFile, Config } from '../types';\nimport { getProcessId } from '../utils';\nimport { print } from './print';\n\nconst processId = getProcessId();\n\nconst createTemporaryFolders = (\n\tenv: Environment\n): {\n\tcomposeTempFolder: string;\n\tresultTempFolder: string;\n} => {\n\tconst workspace = env.getWorkspace();\n\n\tconst composeTempFolder = path.join(workspace, '.compose-temp');\n\tif (fs.existsSync(composeTempFolder)) {\n\t\t// clear\n\t\tfs.rmdirSync(composeTempFolder, { recursive: true });\n\t}\n\t// recreate\n\tfs.mkdirSync(composeTempFolder);\n\n\tconst resultTempFolder = path.join(workspace, '.result-temp');\n\tif (fs.existsSync(resultTempFolder)) {\n\t\tfs.rmdirSync(resultTempFolder, { recursive: true });\n\t}\n\t// recreate\n\tfs.mkdirSync(resultTempFolder);\n\n\tconst resultParamsTempFolder = path.join(workspace, '.result-params-temp');\n\tif (!env.isOnChildProcess()) {\n\t\t// not in child process, delete the result temp folder\n\t\tif (fs.existsSync(resultParamsTempFolder)) {\n\t\t\tfs.rmdirSync(resultParamsTempFolder, { recursive: true });\n\t\t}\n\t}\n\tif (!fs.existsSync(resultParamsTempFolder)) {\n\t\tfs.mkdirSync(resultParamsTempFolder);\n\t}\n\n\treturn {\n\t\tcomposeTempFolder,\n\t\tresultTempFolder\n\t};\n};\n\ntype RunFlow = { flow: FlowFile; resolve: () => void };\nexport const doOnMultipleProcesses = async (flows: FlowFile[], env: Environment): Promise<void> => {\n\tconst resolves: Array<() => void> = [];\n\tPromise.all(flows.map(() => new Promise(resolve => resolves.push(resolve)))).finally(() => {\n\t\tprint(env);\n\t\tconsole.info((`Process[${processId}] finished`.bold as any).green);\n\t});\n\n\tconst { composeTempFolder } = createTemporaryFolders(env);\n\n\tlet childProcessCount = 0;\n\tconst buildActions = (flows: Array<RunFlow>): Array<() => Promise<void | RunFlow>> => {\n\t\treturn flows.map(data => {\n\t\t\tconst { flow, resolve: resolveFlow } = data;\n\t\t\treturn () => {\n\t\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tchildProcessCount++;\n\t\t\t\t\t\tif (!fs.existsSync(composeTempFolder)) {\n\t\t\t\t\t\t\tfs.mkdirSync(composeTempFolder);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst filename = path.join(composeTempFolder, `compose-${uuidv4()}.json`);\n\t\t\t\t\t\tconst childConfig = env.exposeForSingleProcess({ includes: [flow] });\n\t\t\t\t\t\t((childConfig as unknown) as Config).env = childConfig.name;\n\t\t\t\t\t\tdelete childConfig.name;\n\t\t\t\t\t\tjsonfile.writeFileSync(filename, childConfig);\n\t\t\t\t\t\tconst child = spawn(\n\t\t\t\t\t\t\t'node',\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tprocess.argv[1],\n\t\t\t\t\t\t\t\t`--config-file=${filename}`,\n\t\t\t\t\t\t\t\t`--workspace=${env.getWorkspace()}`\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstdio: ['ignore', 'inherit', 'inherit']\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t);\n\t\t\t\t\t\tconst onMyselfExit = () => {\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tchild.kill();\n\t\t\t\t\t\t\t} finally {\n\t\t\t\t\t\t\t\treject();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t\tprocess\n\t\t\t\t\t\t\t.once('exit', onMyselfExit)\n\t\t\t\t\t\t\t.once('SIGINT', onMyselfExit)\n\t\t\t\t\t\t\t.once('SIGTERM', onMyselfExit);\n\t\t\t\t\t\tchild.on('exit', (code: number) => {\n\t\t\t\t\t\t\t// console.log(`child process[${child.pid}] exit on code ${code}.`);\n\t\t\t\t\t\t\tchildProcessCount--;\n\t\t\t\t\t\t\tif (code === 2) {\n\t\t\t\t\t\t\t\t// jammed, resolve me directly, but keep the flow promise\n\t\t\t\t\t\t\t\tresolve({ flow, resolve: resolveFlow });\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tresolve();\n\t\t\t\t\t\t\t\tresolveFlow();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t} catch {\n\t\t\t\t\t\tchildProcessCount--;\n\t\t\t\t\t\tresolve();\n\t\t\t\t\t\tresolveFlow();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t};\n\t\t});\n\t};\n\n\tconst run = async (all: Array<RunFlow>) => {\n\t\treturn new Promise(resolve => {\n\t\t\tconst countLeft = all.length;\n\t\t\tif (countLeft === 0) {\n\t\t\t\tresolve();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst actions = buildActions(all);\n\t\t\tconst jammedFlows: Array<RunFlow> = [];\n\n\t\t\t/**\n\t\t\t * get first action of actions queue.\n\t\t\t * when exists, do action and do next when action accomplished.\n\t\t\t * when not exists, do nothing and quit\n\t\t\t */\n\t\t\tconst next = async () => {\n\t\t\t\tconst action = actions.shift();\n\t\t\t\tif (action) {\n\t\t\t\t\tconst ret = await action();\n\t\t\t\t\tif (ret) {\n\t\t\t\t\t\tjammedFlows.push(ret as RunFlow);\n\t\t\t\t\t}\n\t\t\t\t\tawait next();\n\t\t\t\t} else if (childProcessCount === 0) {\n\t\t\t\t\t// no more action, and all child processed is finished\n\t\t\t\t\tif (countLeft === jammedFlows.length) {\n\t\t\t\t\t\t// nothing can be run\n\t\t\t\t\t} else if (jammedFlows.length !== 0) {\n\t\t\t\t\t\t// there are jammed flows, run again\n\t\t\t\t\t\tawait run(jammedFlows);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// all done\n\t\t\t\t\t}\n\t\t\t\t\tresolve();\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t/**\n\t\t\t * do actions until reach the parallel count\n\t\t\t */\n\t\t\tlet init = 0;\n\t\t\twhile (true) {\n\t\t\t\tinit++;\n\t\t\t\tnext();\n\t\t\t\tif (init == env.getParallel()) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n\tawait run(flows.map((flow, index) => ({ flow, resolve: resolves[index] })));\n};\n"]}