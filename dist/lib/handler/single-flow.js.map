{"version":3,"sources":["../lib/handler/single-flow.ts"],"names":[],"mappings":"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","file":"single-flow.js","sourcesContent":["import fs from 'fs';\nimport jsonfile from 'jsonfile';\nimport { Flow, FlowParameter, FlowParameters, StartStep, Step, Story } from 'last-hit-types';\nimport path from 'path';\nimport stream from 'stream';\nimport Environment from '../config/env';\nimport { createReplayer, ReplayEmitter } from '../replayer';\nimport { CallbackEvent } from '../replayer/replay-emitter';\nimport { FlowFile, FlowResult, Summary } from '../types';\nimport { generateKeyByObject, getLogger, getProcessId } from '../utils';\n\nconst processId = getProcessId();\n\nexport const mergeFlowInput = (source: Flow, target: Flow): void => {\n\tif (source.params && source.params.length !== 0) {\n\t\ttarget.params = target.params || [];\n\t\tconst existsParamNames = target.params!.reduce((names, param) => {\n\t\t\tnames[param.name] = true;\n\t\t\treturn names;\n\t\t}, {} as { [key in string]: true });\n\t\tsource.params\n\t\t\t.filter(param => param.type !== 'out')\n\t\t\t.filter(param => existsParamNames[param.name] !== true)\n\t\t\t.forEach(param => target.params!.push(param));\n\t}\n};\n/**\n * find all force dependencies, and merge steps to one flow\n */\nconst findAndMergeForceDependencyFlows = (flow: Flow, env: Environment): Flow => {\n\tconst forceDependencyFlow = {\n\t\tname: flow.name,\n\t\tdescription: `Merged force dependency flows`,\n\t\tsteps: [] as Array<Step>,\n\t\tparams: [] as FlowParameters\n\t};\n\n\tlet currentFlow = flow;\n\twhile (currentFlow.settings && currentFlow.settings.forceDepends) {\n\t\tconst { story: storyName, flow: flowName } = currentFlow.settings.forceDepends;\n\t\tif (!env.isFlowExists(storyName, flowName)) {\n\t\t\tthrow new Error(`Dependency flow[${flowName}@${storyName}] not found.`);\n\t\t}\n\t\tconst dependsFlow: Flow = env.readFlowFile(storyName, flowName);\n\n\t\tconst steps = dependsFlow.steps || [];\n\n\t\tforceDependencyFlow.steps.splice(\n\t\t\t0,\n\t\t\t0,\n\t\t\t...steps.map(\n\t\t\t\tstep =>\n\t\t\t\t\t({\n\t\t\t\t\t\t...step,\n\t\t\t\t\t\torigin: {\n\t\t\t\t\t\t\tstory: storyName,\n\t\t\t\t\t\t\tflow: dependsFlow.name,\n\t\t\t\t\t\t\tstepIndex: step.stepIndex\n\t\t\t\t\t\t}\n\t\t\t\t\t} as Step)\n\t\t\t)\n\t\t);\n\t\tmergeFlowInput(dependsFlow, forceDependencyFlow);\n\t\tcurrentFlow = dependsFlow;\n\t}\n\n\tforceDependencyFlow.steps = forceDependencyFlow.steps.filter((step, index) => {\n\t\treturn index === 0 || (step.type !== 'start' && step.type !== 'end');\n\t});\n\tforceDependencyFlow.steps.push({ type: 'end' } as Step);\n\tforceDependencyFlow.steps.forEach((step, index) => (step.stepIndex = index));\n\n\treturn forceDependencyFlow;\n};\n\nconst findInDependencyChain = (\n\tstory: string,\n\tflow: string,\n\tdependsChain: { story: string; flow: string }[]\n) => {\n\treturn dependsChain.some(node => node.story === story && node.flow === flow);\n};\n\nconst doForceLoopCheck = (\n\tdepends: FlowFile,\n\tdependsChain: Array<FlowFile>,\n\tenv: Environment\n): boolean => {\n\tconst { story: dependsStoryName, flow: dependsFlowName } = depends;\n\tif (findInDependencyChain(dependsStoryName, dependsFlowName, dependsChain)) {\n\t\tdependsChain.push({ story: dependsStoryName, flow: dependsFlowName });\n\t\tconst chain = dependsChain.map(({ story, flow }) => `${flow}@${story}`).join(' -> ');\n\t\tthrow new Error(`Loop dependency[${chain}] found.`);\n\t}\n\n\tif (!env.isStoryExists(dependsStoryName)) {\n\t\tthrow new Error(`Dependency story[${dependsStoryName}] not found.`);\n\t}\n\tif (!env.isFlowExists(dependsStoryName, dependsFlowName)) {\n\t\tthrow new Error(`Dependency flow[${dependsFlowName}@${dependsStoryName}] not found.`);\n\t}\n\n\tconst dependsFlow = env.readFlowFile(dependsStoryName, dependsFlowName);\n\tconst { forceDepends = null } = dependsFlow.settings || {};\n\tif (forceDepends) {\n\t\tif (findInDependencyChain(forceDepends.story, forceDepends.flow, dependsChain)) {\n\t\t\tdependsChain.push({ story: dependsStoryName, flow: dependsFlowName });\n\t\t\tconst chain = dependsChain.map(({ story, flow }) => `${flow}@${story}`).join(' -> ');\n\t\t\tthrow new Error(`Loop dependency[${chain}] found.`);\n\t\t} else {\n\t\t\t// push dependency to chain\n\t\t\tdependsChain.push({ story: dependsStoryName, flow: dependsFlowName });\n\t\t\treturn doForceLoopCheck(forceDepends, dependsChain, env);\n\t\t}\n\t}\n\treturn true;\n};\n\n/**\n * only check loop. return true even dependency flow not found.\n */\nconst forceLoopCheck = (dependency: FlowFile, myself: FlowFile, env: Environment): boolean => {\n\treturn doForceLoopCheck(dependency, [myself], env);\n};\n\ntype DataLoopCheckNode = {\n\tchildren: Array<DataLoopCheckNode>;\n\tparent: null | DataLoopCheckNode;\n\tstory: string;\n\tflow: string;\n};\nconst dataLoopCheck = (\n\tdepends: Array<{ story: string; flow: string }>,\n\tnode: DataLoopCheckNode,\n\tenv: Environment\n): boolean => {\n\treturn depends.every(depend => {\n\t\tconst { story, flow } = depend;\n\t\tif (story === node.story && flow === node.flow) {\n\t\t\tthrow new Error(\n\t\t\t\t`Loop dependency[${node.flow}@${node.story} -> ${flow}@${story}] found.`\n\t\t\t);\n\t\t}\n\n\t\tconst chain: Array<DataLoopCheckNode> = [node];\n\t\tlet parent = node.parent;\n\t\twhile (parent != null) {\n\t\t\tchain.push(parent);\n\t\t\tif (story === parent.story && flow === parent.flow) {\n\t\t\t\tconst chained = chain.map(({ story, flow }) => `${flow}@${story}`).join(' -> ');\n\t\t\t\tthrow new Error(`Loop dependency[${chained}] found.`);\n\t\t\t}\n\t\t\tparent = parent.parent;\n\t\t}\n\n\t\tif (!env.isStoryExists(story)) {\n\t\t\tthrow new Error(`Dependency story[${story}] not found.`);\n\t\t}\n\t\tif (!env.isFlowExists(story, flow)) {\n\t\t\tthrow new Error(`Dependency flow[${flow}@${story}] not found.`);\n\t\t}\n\t\tconst dependsFlow = env.readFlowFile(story, flow);\n\t\tconst { dataDepends = [] } = dependsFlow.settings || {};\n\n\t\tconst myself = { children: [], parent: node, story, flow };\n\t\tnode.children.push(myself);\n\n\t\treturn dataLoopCheck(dataDepends, myself, env);\n\t});\n};\n\nconst replayNextStep = (\n\temitter: ReplayEmitter,\n\tstory: Story,\n\tflow: Flow,\n\tindex: number,\n\tresolve: () => void\n) => {\n\thandleReplayStepEnd(emitter, story, flow, resolve);\n\temitter.send(`continue-replay-step-${generateKeyByObject(story, flow)}`, {\n\t\tstoryName: story.name,\n\t\tflow,\n\t\tindex: index + 1\n\t});\n};\n\nconst handleReplayStepEnd = (\n\temitter: ReplayEmitter,\n\tstory: Story,\n\tflow: Flow,\n\tresolve: () => void\n): void => {\n\tconst key = generateKeyByObject(story, flow);\n\temitter.once(\n\t\t`replay-step-end-${key}`,\n\t\t(event: CallbackEvent, arg: { error?: any; index: number }): void => {\n\t\t\t// index: index of the finished step, starts from 0\n\t\t\tconst { error, index } = arg;\n\t\t\tif (error) {\n\t\t\t\t(async () => {\n\t\t\t\t\tconsole.error(\n\t\t\t\t\t\t(`Process[${processId}] Replay flow ${key} failed on step ${index + 1}.`\n\t\t\t\t\t\t\t.bold as any).red.bold,\n\t\t\t\t\t\terror\n\t\t\t\t\t);\n\t\t\t\t\temitter.once(`replay-browser-abolish-${key}`, () => resolve());\n\t\t\t\t\t// abolish anyway\n\t\t\t\t\temitter.send(`continue-replay-step-${key}`, { command: 'abolish' });\n\t\t\t\t})();\n\t\t\t} else if (flow.steps![index].type === 'end' || index >= flow.steps!.length - 1) {\n\t\t\t\t// the end or last step is finished\n\t\t\t\t(async () => {\n\t\t\t\t\tconsole.info(\n\t\t\t\t\t\t(`Process[${processId}] Replay flow ${key} finished.`.bold as any).green\n\t\t\t\t\t);\n\t\t\t\t\temitter.once(`replay-browser-abolish-${key}`, () => resolve());\n\t\t\t\t\temitter.send(`continue-replay-step-${key}`, { command: 'abolish' });\n\t\t\t\t})();\n\t\t\t} else {\n\t\t\t\t// go on\n\t\t\t\treplayNextStep(emitter, story, flow, index, resolve);\n\t\t\t}\n\t\t}\n\t);\n};\n\nexport const handleFlow = (flowFile: FlowFile, env: Environment): Promise<FlowResult> => {\n\tconst logger = getLogger();\n\tconst { story: storyName, flow: flowName } = flowFile;\n\tconst flowKey = `${flowName}@${storyName}`;\n\tconst workspace = env.getWorkspace();\n\n\tconst timeLoggerStream = new stream.Transform();\n\tlet timeSpent;\n\ttimeLoggerStream._transform = function(chunk, encoding, done) {\n\t\tthis.push(chunk);\n\t\ttimeSpent = typeof chunk === 'string' ? chunk : chunk.toString();\n\t\tdone();\n\t};\n\tconst timeLogger = new console.Console({ stdout: timeLoggerStream });\n\ttimeLogger.time(flowKey);\n\n\tconsole.info(\n\t\t(`Process[${processId}] Start to replay [${flowKey}].` as any).italic.blue.underline\n\t);\n\tlet flow: Flow;\n\ttry {\n\t\tflow = env.readFlowFile(storyName, flowName);\n\t} catch (e) {\n\t\tlogger.error(e);\n\t\treturn Promise.reject();\n\t}\n\tflow.name = flowName;\n\n\tif (flow.steps == null || flow.steps.length === 0) {\n\t\tconsole.info(\n\t\t\t(`Process[${processId}] Flow ${flowKey} has no steps, ignored.` as any).red.bold\n\t\t);\n\t\treturn Promise.reject();\n\t}\n\n\tif (flow.settings && flow.settings.forceDepends) {\n\t\t// has force dependency\n\t\tconst { story: dependsStoryName, flow: dependsFlowName } = flow.settings.forceDepends;\n\t\ttry {\n\t\t\tforceLoopCheck(\n\t\t\t\t{ story: dependsStoryName, flow: dependsFlowName },\n\t\t\t\t{ story: storyName, flow: flowName },\n\t\t\t\tenv\n\t\t\t);\n\t\t} catch (e) {\n\t\t\tlogger.error(e);\n\t\t\tconsole.info(\n\t\t\t\t(`Process[${processId}] Flow ${flowKey} failed on force dependency loop check, ignored.` as any)\n\t\t\t\t\t.red.bold\n\t\t\t);\n\t\t\treturn Promise.reject();\n\t\t}\n\t\tconst forceDependsFlow = findAndMergeForceDependencyFlows(flow, env);\n\t\t// remove end step\n\t\tforceDependsFlow.steps!.length = forceDependsFlow.steps!.length - 1;\n\t\tflow.steps\n\t\t\t.filter((step, index) => index !== 0)\n\t\t\t.forEach(step =>\n\t\t\t\tforceDependsFlow.steps!.push({\n\t\t\t\t\t...step,\n\t\t\t\t\torigin: {\n\t\t\t\t\t\tstory: storyName,\n\t\t\t\t\t\tflow: flow.name,\n\t\t\t\t\t\tstepIndex: step.stepIndex\n\t\t\t\t\t}\n\t\t\t\t} as Step)\n\t\t\t);\n\t\tmergeFlowInput(flow, forceDependsFlow);\n\t\tflow = forceDependsFlow;\n\t}\n\n\tif (flow.settings && flow.settings.dataDepends) {\n\t\t// has data dependency\n\t\tconst depends: Array<{ story: string; flow: string }> = flow.settings.dataDepends.filter(\n\t\t\tdepend => depend.story && depend.flow\n\t\t);\n\t\tconst root: DataLoopCheckNode = {\n\t\t\tchildren: [],\n\t\t\tparent: null,\n\t\t\tstory: storyName,\n\t\t\tflow: flowName\n\t\t};\n\t\ttry {\n\t\t\tdataLoopCheck(depends, root, env);\n\t\t} catch (e) {\n\t\t\tlogger.error(e);\n\t\t\tconsole.info(\n\t\t\t\t(`Process[${processId}] Flow ${flowKey} failed on data dependency loop check, ignored.` as any)\n\t\t\t\t\t.red.bold\n\t\t\t);\n\t\t\treturn Promise.reject();\n\t\t}\n\t\t// to check all data dependencies are finished\n\t\tconst score = root.children.reduce((score: number, depend: DataLoopCheckNode) => {\n\t\t\tswitch (score) {\n\t\t\t\tcase 1:\n\t\t\t\t\t// dependency not finished yet\n\t\t\t\t\treturn 1;\n\t\t\t\tcase 2:\n\t\t\t\t\t// dependency failure\n\t\t\t\t\treturn 2;\n\t\t\t\tdefault:\n\t\t\t\t\t// check dependency\n\t\t\t\t\tconst { story: storyName, flow: flowName } = depend;\n\t\t\t\t\tconst resultFile = path.join(\n\t\t\t\t\t\tenv.getWorkspace(),\n\t\t\t\t\t\t'.result-params-temp',\n\t\t\t\t\t\tstoryName,\n\t\t\t\t\t\tflowName,\n\t\t\t\t\t\t'params.json'\n\t\t\t\t\t);\n\t\t\t\t\tif (fs.existsSync(resultFile) && fs.statSync(resultFile).isFile()) {\n\t\t\t\t\t\tconst result = jsonfile.readFileSync(resultFile);\n\t\t\t\t\t\tconst { success, params = [] } = result || { success: false };\n\t\t\t\t\t\tif (!success) {\n\t\t\t\t\t\t\t// dependency failed\n\t\t\t\t\t\t\treturn 2;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tparams\n\t\t\t\t\t\t\t\t.filter((param: FlowParameter) => {\n\t\t\t\t\t\t\t\t\treturn ['out', 'both'].includes(param.type);\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t.forEach((param: FlowParameter) => {\n\t\t\t\t\t\t\t\t\tflow.params = flow.params || [];\n\t\t\t\t\t\t\t\t\tconst defined = flow.params.find(\n\t\t\t\t\t\t\t\t\t\tdefined =>\n\t\t\t\t\t\t\t\t\t\t\t['in', 'both'].includes(defined.type) &&\n\t\t\t\t\t\t\t\t\t\t\tdefined.name === param.name\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\tif (defined) {\n\t\t\t\t\t\t\t\t\t\t// pass value\n\t\t\t\t\t\t\t\t\t\tdefined.value = param.value;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t// create an input parameter\n\t\t\t\t\t\t\t\t\t\tflow.params.push({\n\t\t\t\t\t\t\t\t\t\t\ttype: 'in',\n\t\t\t\t\t\t\t\t\t\t\tname: param.name,\n\t\t\t\t\t\t\t\t\t\t\tvalue: param.value\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\treturn 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn 1;\n\t\t\t\t\t}\n\t\t\t}\n\t\t}, 0);\n\t\tswitch (score) {\n\t\t\tcase 1:\n\t\t\t\tconsole.info(\n\t\t\t\t\t(`Process[${processId}] Flow ${flowKey} pending on data dependency flow not ready.` as any)\n\t\t\t\t\t\t.yellow.underline\n\t\t\t\t);\n\t\t\t\t// dependency not finished yet\n\t\t\t\treturn Promise.resolve({\n\t\t\t\t\tcode: 'pending'\n\t\t\t\t} as FlowResult);\n\t\t\tcase 2:\n\t\t\t\t// dependency failure\n\t\t\t\tconsole.info(\n\t\t\t\t\t(`Process[${processId}] Flow ${flowKey} failed on data dependency flow failure, ignored.` as any)\n\t\t\t\t\t\t.red.bold\n\t\t\t\t);\n\t\t\t\treturn Promise.reject();\n\t\t\tdefault:\n\t\t\t\t// every is ready, let's go\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tconst startStep = flow.steps![0] as StartStep;\n\tif (startStep.type !== 'start') {\n\t\tconsole.info(\n\t\t\t(`Process[${processId}] Flow ${flowKey} has no start step, ignored.` as any).red.bold\n\t\t);\n\t\treturn Promise.reject();\n\t}\n\tif (!startStep.url) {\n\t\tconsole.info(\n\t\t\t(`Process[${processId}] Flow ${flowKey} has no start url, ignored.` as any).red.bold\n\t\t);\n\t\treturn Promise.reject();\n\t}\n\n\tconst emitter = new ReplayEmitter();\n\tlet replayer;\n\ttry {\n\t\treplayer = createReplayer({ emitter, logger, env }).initialize();\n\t} catch (e) {\n\t\tlogger.error(e);\n\t\treturn Promise.reject();\n\t}\n\n\tconst promise = new Promise<FlowResult>(resolve => {\n\t\thandleReplayStepEnd(emitter, { name: storyName } as Story, flow, () => {\n\t\t\tconst summary: Summary = replayer.current.getSummaryData();\n\t\t\t// write out parameters only\n\t\t\tconst resultFolder = path.join(\n\t\t\t\tenv.getWorkspace(),\n\t\t\t\t'.result-params-temp',\n\t\t\t\tstoryName,\n\t\t\t\tflowName\n\t\t\t);\n\t\t\tfs.mkdirSync(resultFolder, { recursive: true });\n\t\t\tconst result = {\n\t\t\t\tsuccess: summary.numberOfStep === summary.numberOfSuccess,\n\t\t\t\tparams: summary.flowParams\n\t\t\t};\n\t\t\tconst resultFile = path.join(resultFolder, 'params.json');\n\t\t\tjsonfile.writeFileSync(resultFile, result, { encoding: 'UTF-8', spaces: '\\t' });\n\t\t\ttimeLogger.timeEnd(flowKey);\n\t\t\tresolve({\n\t\t\t\treport: { ...summary, spent: timeSpent },\n\t\t\t\tcoverages: replayer.current.getCoverageData(),\n\t\t\t\tcode: 'success'\n\t\t\t});\n\t\t});\n\t});\n\temitter.send('launch-replay', { flow, index: 0, storyName });\n\treturn promise;\n};\n"]}