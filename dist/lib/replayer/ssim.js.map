{"version":3,"sources":["../lib/replayer/ssim.ts"],"names":[],"mappings":";;;;;AAAA,+BAA4B;AAC5B,0DAA8B;AAC9B,0CAAoB;AAEpB,IAAM,SAAS,GAAG,UAAC,KAAa,EAAE,KAAa,EAAE,IAAqC;IACrF,IAAM,MAAM,GAAuB,EAAE,CAAC;IACtC,IAAM,MAAM,GAAG,UAAC,GAAgB;QAC/B,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACjB,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE;YACxB,IAAI,CAAC,MAAM,CAAC,CAAC;SACb;IACF,CAAC,CAAC;IACF,IAAM,IAAI,GAAG,UAAC,QAAgB,EAAE,IAAkC;QACjE,YAAE,CAAC,gBAAgB,CAAC,QAAQ,CAAC;aAC3B,IAAI,CAAC,IAAI,WAAG,EAAE,CAAC;aACf,EAAE,CAAC,QAAQ,EAAE;YACb,IAAI,CAAC;gBACJ,IAAI,EAAE,IAAI,CAAC,IAAI;gBACf,KAAK,EAAE,IAAI,CAAC,KAAK;gBACjB,MAAM,EAAE,IAAI,CAAC,MAAM;gBACnB,QAAQ,EAAE,CAAC;aACX,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC,CAAC;IAEF,IAAI,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;IACpB,IAAI,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;AACrB,CAAC,CAAC;AAEF,IAAM,UAAU,GAAG,UAAC,QAAqB,EAAE,MAAmB;IAC7D,OAAA,QAAQ,CAAC,KAAK,IAAI,MAAM,CAAC,KAAK,IAAI,QAAQ,CAAC,MAAM,IAAI,MAAM,CAAC,MAAM;AAAlE,CAAkE,CAAC;AAEpE,mBAAe,UAAC,gBAAwB,EAAE,cAAsB;IAC/D,OAAO,IAAI,OAAO,CAAC,UAAA,OAAO;QACzB,SAAS,CAAC,gBAAgB,EAAE,cAAc,EAAE,UAAC,MAAqB;YACjE,IAAM,QAAQ,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;YAC3B,IAAM,MAAM,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;YACzB,IAAI,UAAU,CAAC,QAAQ,EAAE,MAAM,CAAC,EAAE;gBACjC,IAAM,GAAG,GAAG,oBAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;gBAC3C,OAAO,CAAC,GAAG,CAAC,CAAC;aACb;iBAAM;gBACN,OAAO,CAAC,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;aACjC;QACF,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC;AACJ,CAAC,EAAC","file":"ssim.js","sourcesContent":["import { PNG } from 'pngjs';\nimport ssim from 'image-ssim';\nimport fs from 'fs';\n\nconst loadImage = (file1: string, file2: string, done: (images: ssim.IImage[]) => void) => {\n\tconst images: Array<ssim.IImage> = [];\n\tconst onLoad = (img: ssim.IImage): void => {\n\t\timages.push(img);\n\t\tif (images.length === 2) {\n\t\t\tdone(images);\n\t\t}\n\t};\n\tconst load = (filePath: string, done: (image: ssim.IImage) => void) => {\n\t\tfs.createReadStream(filePath)\n\t\t\t.pipe(new PNG())\n\t\t\t.on('parsed', function(this: any) {\n\t\t\t\tdone({\n\t\t\t\t\tdata: this.data,\n\t\t\t\t\twidth: this.width,\n\t\t\t\t\theight: this.height,\n\t\t\t\t\tchannels: 4\n\t\t\t\t});\n\t\t\t});\n\t};\n\n\tload(file1, onLoad);\n\tload(file2, onLoad);\n};\n\nconst isSameSize = (baseline: ssim.IImage, replay: ssim.IImage): boolean =>\n\tbaseline.width == replay.width && baseline.height == replay.height;\n\nexport default (baselineFilename: string, replayFilename: string): Promise<ssim.IResult> => {\n\treturn new Promise(resolve => {\n\t\tloadImage(baselineFilename, replayFilename, (images: ssim.IImage[]): void => {\n\t\t\tconst baseline = images[0];\n\t\t\tconst replay = images[1];\n\t\t\tif (isSameSize(baseline, replay)) {\n\t\t\t\tconst res = ssim.compare(baseline, replay);\n\t\t\t\tresolve(res);\n\t\t\t} else {\n\t\t\t\tresolve({ ssim: 0.1, mcs: 0.1 });\n\t\t\t}\n\t\t});\n\t});\n};\n"]}