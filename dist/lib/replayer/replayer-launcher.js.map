{"version":3,"sources":["../lib/replayer/replayer-launcher.ts"],"names":[],"mappings":"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","file":"replayer-launcher.js","sourcesContent":["import { Flow, Step } from 'last-hit-types';\nimport Environment from '../config/env';\nimport { generateKeyByString } from '../utils';\nimport ReplayEmitter, { CallbackEvent } from './replay-emitter';\nimport Replayer from './replayer';\nimport { WorkspaceExtensionRegistry } from './replayer-extension-registry';\nimport { ReplayerCache } from './replayers-cache';\n\nexport type ReplayerHandle = { current?: Replayer; env: Environment };\nexport type ReplayerLauncher = () => ReplayerHandle;\ntype NextStepHandlerOptions = {\n\tstoryName: string;\n\tflowName: string;\n\treplayer: Replayer;\n\tindex: number;\n\tevent: CallbackEvent;\n\terror?: Error;\n\terrorStack?: string;\n};\ntype NextStepHandler = (options: NextStepHandlerOptions) => void;\n\nconst createNextStepHandler = (emitter: ReplayEmitter, logger: Console): NextStepHandler => {\n\tconst waitForNextStep = (options: NextStepHandlerOptions): void => {\n\t\tconst { storyName, flowName, replayer } = options;\n\t\temitter.once(\n\t\t\t`continue-replay-step-${generateKeyByString(storyName, flowName)}`,\n\t\t\tasync (\n\t\t\t\tevent: CallbackEvent,\n\t\t\t\targ: {\n\t\t\t\t\tflow: Flow;\n\t\t\t\t\tindex: number;\n\t\t\t\t\tcommand?: 'disconnect' | 'abolish' | 'switch-to-record';\n\t\t\t\t}\n\t\t\t) => {\n\t\t\t\tconst { flow, index, command } = arg;\n\t\t\t\tconst step = replayer.getSteps()[index];\n\t\t\t\tswitch (command) {\n\t\t\t\t\tcase 'disconnect':\n\t\t\t\t\t\tawait replayer.end(false);\n\t\t\t\t\t\tevent.reply(\n\t\t\t\t\t\t\t`replay-browser-disconnect-${generateKeyByString(storyName, flowName)}`,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tsummary: replayer.getSummaryData()\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'abolish':\n\t\t\t\t\t\tawait replayer.end(true);\n\t\t\t\t\t\tevent.reply(\n\t\t\t\t\t\t\t`replay-browser-abolish-${generateKeyByString(storyName, flowName)}`,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tsummary: replayer.getSummaryData()\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'switch-to-record':\n\t\t\t\t\t\t// keep replayer instance in replayers map\n\t\t\t\t\t\treplayer.switchToRecord();\n\t\t\t\t\t\tevent.reply(\n\t\t\t\t\t\t\t`replay-browser-ready-to-switch-${generateKeyByString(\n\t\t\t\t\t\t\t\tstoryName,\n\t\t\t\t\t\t\t\tflowName\n\t\t\t\t\t\t\t)}`,\n\t\t\t\t\t\t\t{}\n\t\t\t\t\t\t);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tlogger.log(\n\t\t\t\t\t\t\t\t`Continue step[${index}]@${generateKeyByString(\n\t\t\t\t\t\t\t\t\tstoryName,\n\t\t\t\t\t\t\t\t\tflowName\n\t\t\t\t\t\t\t\t)}.`\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tawait replayer.next(flow, index, storyName);\n\t\t\t\t\t\t\treplayer.getSummary().handle(step);\n\n\t\t\t\t\t\t\twaitForNextStep({ event, replayer, storyName, flowName, index });\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\tlogger.error('Step execution failed, failed step as below:');\n\t\t\t\t\t\t\tlogger.error(step);\n\t\t\t\t\t\t\tlogger.error(e);\n\t\t\t\t\t\t\t// failed, prepare for next step\n\t\t\t\t\t\t\t// send back\n\t\t\t\t\t\t\t// replayer.getSummary().handleError(step, e);\n\t\t\t\t\t\t\twaitForNextStep({\n\t\t\t\t\t\t\t\tevent,\n\t\t\t\t\t\t\t\treplayer,\n\t\t\t\t\t\t\t\tstoryName,\n\t\t\t\t\t\t\t\tflowName,\n\t\t\t\t\t\t\t\tindex,\n\t\t\t\t\t\t\t\terror: e.message,\n\t\t\t\t\t\t\t\terrorStack: e.stack\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\t\tlogger.log(\n\t\t\t`Reply message step[${options.index}]@[replay-step-end-${generateKeyByString(\n\t\t\t\tstoryName,\n\t\t\t\tflowName\n\t\t\t)}].`\n\t\t);\n\n\t\toptions.event.reply(`replay-step-end-${generateKeyByString(storyName, flowName)}`, {\n\t\t\tindex: options.index,\n\t\t\terror: options.error,\n\t\t\terrorStack: options.errorStack,\n\t\t\tsummary: replayer.getSummaryData()\n\t\t});\n\t};\n\treturn waitForNextStep;\n};\n\nconst launch = (\n\temitter: ReplayEmitter,\n\treplayers: ReplayerCache,\n\tlogger: Console,\n\tenv: Environment\n): ReplayerHandle => {\n\tconst waitForNextStep = createNextStepHandler(emitter, logger);\n\n\tconst handle: ReplayerHandle = { env };\n\temitter.on(\n\t\t'launch-replay',\n\t\tasync (event: CallbackEvent, arg: { storyName: string; flow: Flow; index: number }) => {\n\t\t\tconst { storyName, flow, index } = arg;\n\t\t\tconst registry = new WorkspaceExtensionRegistry({ env: handle.env });\n\t\t\tawait registry.launch();\n\n\t\t\tconst replayer = new Replayer({\n\t\t\t\tstoryName,\n\t\t\t\tflow,\n\t\t\t\tlogger,\n\t\t\t\treplayers,\n\t\t\t\tenv: handle.env,\n\t\t\t\tregistry\n\t\t\t});\n\t\t\thandle.current = replayer;\n\n\t\t\ttry {\n\t\t\t\tawait replayer.start();\n\t\t\t\treplayer.getSummary().handle((flow.steps || [])[0] || ({} as Step));\n\t\t\t\t// put into cache\n\t\t\t\treplayers[generateKeyByString(storyName, flow.name)] = replayer;\n\n\t\t\t\t// successful, prepare for next step\n\t\t\t\t// send back\n\t\t\t\twaitForNextStep({ event, replayer, storyName, flowName: flow.name, index });\n\t\t\t} catch (e) {\n\t\t\t\tlogger.error(e);\n\t\t\t\treplayer.getSummary().handleError((flow.steps || [])[0] || ({} as Step), e);\n\t\t\t\t// failed, prepare for next step\n\t\t\t\t// send back\n\t\t\t\twaitForNextStep({\n\t\t\t\t\tevent,\n\t\t\t\t\treplayer,\n\t\t\t\t\tstoryName,\n\t\t\t\t\tflowName: flow.name,\n\t\t\t\t\tindex,\n\t\t\t\t\terror: e.message,\n\t\t\t\t\terrorStack: e.stack\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t);\n\treturn handle;\n};\n\nexport default (\n\temitter: ReplayEmitter,\n\treplayers: ReplayerCache,\n\tlogger: Console,\n\tenv: Environment\n): ReplayerLauncher => {\n\treturn (): ReplayerHandle => launch(emitter, replayers, logger, env);\n};\n"]}