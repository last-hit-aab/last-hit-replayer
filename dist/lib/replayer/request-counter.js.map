{"version":3,"sources":["../lib/replayer/request-counter.ts"],"names":[],"mappings":"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","file":"request-counter.js","sourcesContent":["import { Page, Request } from 'puppeteer';\nimport ReplaySummary from './replay-summary';\n\nclass RequestCounter {\n\tprivate page: Page;\n\tprivate summary: ReplaySummary;\n\n\tprivate requests: Array<Request> = [];\n\tprivate offsets: Array<Request> = [];\n\t/** key is url, value is number array */\n\tprivate requestsCreateAt: { [key in string]: Array<number> } = {};\n\t/** key is url, value is number array */\n\tprivate requestsOffsetAt: { [key in string]: Array<number> } = {};\n\n\tprivate timeout: number = 60000;\n\tprivate used: number = 0;\n\n\tprivate logger: Console;\n\n\tconstructor(page: Page, summary: ReplaySummary, logger: Console) {\n\t\tthis.page = page;\n\t\tthis.summary = summary;\n\t\tthis.logger = logger;\n\t}\n\tgetPage(): Page {\n\t\treturn this.page;\n\t}\n\tcreate(request: Request): void {\n\t\t// logger.log(`Request ${request.url()} created.`);\n\t\tthis.requests.push(request);\n\t\tif (['xhr', 'fetch', 'websocket'].includes(request.resourceType())) {\n\t\t\tconst url = request.url();\n\t\t\tconst createAt = this.requestsCreateAt[url];\n\t\t\tif (createAt) {\n\t\t\t\tcreateAt.push(new Date().getTime());\n\t\t\t} else {\n\t\t\t\tthis.requestsCreateAt[url] = [new Date().getTime()];\n\t\t\t}\n\t\t}\n\t\t// reset used time to 0, ensure timeout is begin from the last created request\n\t\tthis.used = 0;\n\t}\n\toffset(request: Request, success: boolean): void {\n\t\t// logger.log(`Request ${request.url()} offsetted.`);\n\t\tthis.offsets.push(request);\n\n\t\tif (['xhr', 'fetch', 'websocket'].includes(request.resourceType())) {\n\t\t\tconst url = request.url();\n\t\t\tconst offsetAt = this.requestsOffsetAt[url];\n\t\t\tif (offsetAt) {\n\t\t\t\toffsetAt.push(new Date().getTime());\n\t\t\t} else {\n\t\t\t\tthis.requestsOffsetAt[url] = [new Date().getTime()];\n\t\t\t}\n\t\t\tconst startTime = (() => {\n\t\t\t\tconst times = this.requestsCreateAt[url];\n\t\t\t\treturn (times ? times[times.length - 1] : 0) || 0;\n\t\t\t})();\n\t\t\tconst endTime = (() => {\n\t\t\t\tconst times = this.requestsOffsetAt[url];\n\t\t\t\treturn (times ? times[times.length - 1] : 0) || 0;\n\t\t\t})();\n\t\t\tconst usedTime = endTime - startTime;\n\t\t\t// console.log(`Used ${usedTime}ms for url[${url}]`);\n\t\t\tif (success) {\n\t\t\t\tthis.summary.handleAjaxSuccess(url, usedTime);\n\t\t\t} else {\n\t\t\t\tthis.summary.handleAjaxFail(url, usedTime);\n\t\t\t}\n\t\t}\n\t}\n\tprivate clear(): void {\n\t\tthis.requests = [];\n\t\tthis.offsets = [];\n\t\tthis.used = 0;\n\t}\n\tprivate async poll(\n\t\tresolve: () => void,\n\t\treject: (error: Error) => void,\n\t\tcanResolve: boolean = false\n\t) {\n\t\tawait this.getPage().waitFor(1000);\n\t\tthis.used += 1000;\n\n\t\tthis.requests.forEach((request, index) =>\n\t\t\tthis.logger.debug(\n\t\t\t\t`reqeusts check, the request index is ${index}, request url is ${request.url()}`\n\t\t\t)\n\t\t);\n\t\tthis.offsets.forEach((request, index) =>\n\t\t\tthis.logger.debug(\n\t\t\t\t`offsets check, the request index is ${index}, request url is ${request.url()}`\n\t\t\t)\n\t\t);\n\t\tthis.logger.debug(\n\t\t\t`Check all requests are done, currently ${this.requests.length} created and ${this.offsets.length} offsetted.`\n\t\t);\n\n\t\t// when the page pop up, the page has been loaded before request interception, then requests length will less than offsets length\n\t\t// RESEARCH might lost one request, don't know why\n\t\t// add logic that gap requests count less or equals 2%, also pass\n\t\tif (\n\t\t\tthis.requests.length <= this.offsets.length ||\n\t\t\t(this.requests.length - this.offsets.length) / this.requests.length <= 0.02\n\t\t) {\n\t\t\tif (canResolve) {\n\t\t\t\tthis.clear();\n\t\t\t\tresolve();\n\t\t\t} else {\n\t\t\t\tthis.poll(resolve, reject, true);\n\t\t\t}\n\t\t} else if (this.used > this.timeout) {\n\t\t\tconst usedTime = this.used;\n\t\t\tconst msg = `Wait for all requests done, ${this.requests.length} sent and ${this.offsets.length} received, timeout after ${usedTime}ms.`;\n\t\t\tthis.clear();\n\t\t\treject(new Error(msg));\n\t\t} else {\n\t\t\tthis.poll(resolve, reject);\n\t\t}\n\t}\n\twaitForAllDone(): Promise<void> {\n\t\tthis.used = 0;\n\t\treturn new Promise((resolve, reject) => this.poll(resolve, reject));\n\t}\n}\n\nexport default RequestCounter;\n"]}